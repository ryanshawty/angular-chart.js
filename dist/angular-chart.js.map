{"version":3,"sources":["angular-chart.js"],"names":["chart","type","restrict","scope","data","labels","options","series","colours","getColour","chartType","legend","click","link","elem","resetChart","newVal","isEmpty","destroy","createChart","container","document","createElement","className","replaceWith","appendChild","window","G_vmlCanvasManager","initElement","$watch","oldVal","length","Array","isArray","canUpdateChart","updateChart","$on","update","reduce","sum","carry","val","getRandomColour","getColours","cvs","ctx","getContext","getDataSets","getData","Chart","$emit","onclick","evt","getPointsAtEvent","getBarsAtEvent","getSegmentsAtEvent","activePoints","call","$apply","setLegend","angular","copy","defaults","global","push","map","convertColour","colour","hexToRgb","substr","getRandomInt","fillColor","rgba","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","min","max","Math","floor","random","alpha","concat","join","datasets","item","i","dataSet","label","value","color","highlight","$parent","parent","$oldLegend","find","generateLegend","append","values","forEach","dataset","points","bars","dataItem","j","segments","segment","Object","keys","hex","bigint","parseInt","r","g","b","responsive","multiTooltipTemplate","module","directive"],"mappings":"CAAA,WACE,YAyEA,SAASA,GAAOC,GACd,OACEC,SAAU,KACVC,OACEC,KAAM,IACNC,OAAQ,IACRC,QAAS,IACTC,OAAQ,IACRC,QAAS,KACTC,UAAW,KACXC,UAAW,IACXC,OAAQ,IACRC,MAAO,KAETC,KAAM,SAAUV,EAAOW,GA4CrB,QAASC,GAAYC,GACnB,IAAIC,EAAQD,GAAZ,CACA,GAAIN,GAAYT,GAAQE,EAAMO,SACxBA,KAIFV,GAAOA,EAAMkB,UAEjBlB,EAAQmB,EAAYT,EAAWP,EAAOW,KApDxC,GAAId,GAAOoB,EAAYC,SAASC,cAAc,MAC9CF,GAAUG,UAAY,kBACtBT,EAAKU,YAAYJ,GACjBA,EAAUK,YAAYX,EAAK,IAEc,gBAA9BY,QAAOC,oBAAiE,OAA9BD,OAAOC,oBACL,kBAA1CD,QAAOC,mBAAmBC,aACnCF,OAAOC,mBAAmBC,YAAYd,EAAK,IAI/CX,EAAM0B,OAAO,OAAQ,SAAUb,EAAQc,GACrC,GAAMd,GAAYA,EAAOe,UAAWC,MAAMC,QAAQjB,EAAO,KAASA,EAAO,GAAGe,QAA5E,CACA,GAAIrB,GAAYT,GAAQE,EAAMO,SAC9B,IAAMA,EAAN,CAEA,GAAIV,EAAO,CACT,GAAIkC,EAAelB,EAAQc,GAAS,MAAOK,GAAYnC,EAAOgB,EAAQb,EACtEH,GAAMkB,UAGRlB,EAAQmB,EAAYT,EAAWP,EAAOW,OACrC,GAEHX,EAAM0B,OAAO,SAAUd,GAAY,GACnCZ,EAAM0B,OAAO,SAAUd,GAAY,GACnCZ,EAAM0B,OAAO,UAAWd,GAAY,GACpCZ,EAAM0B,OAAO,UAAWd,GAAY,GAEpCZ,EAAM0B,OAAO,YAAa,SAAUb,GAC5BA,IACFhB,GAAOA,EAAMkB,UACjBlB,EAAQmB,EAAYH,EAAQb,EAAOW,MAGrCX,EAAMiC,IAAI,WAAY,WAChBpC,GAAOA,EAAMkB,YAGnBf,EAAMiC,IAAI,UAAW,WACfpC,GAAOA,EAAMqC,aAkBzB,QAASH,GAAelB,EAAQc,GAC9B,MAAId,IAAUc,GAAUd,EAAOe,QAAUD,EAAOC,OACvCC,MAAMC,QAAQjB,EAAO,IAC5BA,EAAOe,SAAWD,EAAOC,QAAUf,EAAO,GAAGe,SAAWD,EAAO,GAAGC,OAChED,EAAOQ,OAAOC,EAAK,GAAK,EAAIvB,EAAOe,SAAWD,EAAOC,QAAS,GAE3D,EAGT,QAASQ,GAAKC,EAAOC,GACnB,MAAOD,GAAQC,EAGjB,QAAStB,GAAalB,EAAME,EAAOW,GACjC,GAAMX,EAAMC,MAAUD,EAAMC,KAAK2B,OAAjC,CACA5B,EAAMM,UAAuC,kBAApBN,GAAMM,UAA2BN,EAAMM,UAAYiC,EAC5EvC,EAAMK,QAAUmC,EAAWxC,EAC3B,IAAIyC,GAAM9B,EAAK,GAAI+B,EAAMD,EAAIE,WAAW,MACpC1C,EAAO4B,MAAMC,QAAQ9B,EAAMC,KAAK,IAClC2C,EAAY5C,EAAME,OAAQF,EAAMC,KAAMD,EAAMI,WAAcJ,EAAMK,SAChEwC,EAAQ7C,EAAME,OAAQF,EAAMC,KAAMD,EAAMK,SACtCR,EAAQ,GAAIiD,OAAMJ,GAAK5C,GAAMG,EAAMD,EAAMG,YAc7C,OAbAH,GAAM+C,MAAM,SAAUlD,GAClBG,EAAMS,QACRgC,EAAIO,QAAU,SAAUC,GACtB,GAAIxC,GAAQZ,EAAMqD,kBAAoBrD,EAAMsD,gBAAkBtD,EAAMuD,kBAEpE,IAAI3C,EAAO,CACT,GAAI4C,GAAe5C,EAAM6C,KAAKzD,EAAOoD,EACrCjD,GAAMS,MAAM4C,EAAcJ,GAC1BjD,EAAMuD,YAIRvD,EAAMQ,QAA2B,UAAjBR,EAAMQ,QAAoBgD,EAAU7C,EAAMd,GACvDA,GAGT,QAAS2C,GAAYxC,GAEnB,IADA,GAAIK,GAAUL,EAAMK,SAAWoD,QAAQC,KAAKZ,MAAMa,SAASC,OAAOvD,SAC3DA,EAAQuB,OAAS5B,EAAMC,KAAK2B,QACjCvB,EAAQwD,KAAK7D,EAAMM,YAErB,OAAOD,GAAQyD,IAAIC,GAGrB,QAASA,GAAeC,GACtB,MAAsB,gBAAXA,IAAkC,OAAXA,EAAwBA,EACpC,gBAAXA,IAAqC,MAAdA,EAAO,GAAmB1D,EAAU2D,EAASD,EAAOE,OAAO,KACtF3B,IAGT,QAASA,KACP,GAAIyB,IAAUG,EAAa,EAAG,KAAMA,EAAa,EAAG,KAAMA,EAAa,EAAG,KAC1E,OAAO7D,GAAU0D,GAGnB,QAAS1D,GAAW0D,GAClB,OACEI,UAAWC,EAAKL,EAAQ,IACxBM,YAAaD,EAAKL,EAAQ,GAC1BO,WAAYF,EAAKL,EAAQ,GACzBQ,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsBL,EAAKL,EAAQ,KAIvC,QAASG,GAAcQ,EAAKC,GAC1B,MAAOC,MAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGvD,QAASN,GAAKL,EAAQgB,GACpB,MAAO,QAAUhB,EAAOiB,OAAOD,GAAOE,KAAK,KAAO,IAGpD,QAAStC,GAAa1C,EAAQD,EAAMG,EAAQC,GAC1C,OACEH,OAAQA,EACRiF,SAAUlF,EAAK6D,IAAI,SAAUsB,EAAMC,GACjC,GAAIC,GAAU7B,QAAQC,KAAKrD,EAAQgF,GAGnC,OAFAC,GAAQC,MAAQnF,EAAOiF,GACvBC,EAAQrF,KAAOmF,EACRE,KAKb,QAASzC,GAAS3C,EAAQD,EAAMI,GAC9B,MAAOH,GAAO4D,IAAI,SAAUyB,EAAOF,GACjC,OACEE,MAAOA,EACPC,MAAOvF,EAAKoF,GACZI,MAAOpF,EAAQgF,GAAGf,YAClBoB,UAAWrF,EAAQgF,GAAGX,wBAK5B,QAASlB,GAAW7C,EAAMd,GACxB,GAAI8F,GAAUhF,EAAKiF,SACfC,EAAaF,EAAQG,KAAK,gBAC1BtF,EAAS,iBAAmBX,EAAMkG,iBAAmB,iBACrDF,GAAWjE,OAAQiE,EAAWxE,YAAYb,GACzCmF,EAAQK,OAAOxF,GAGtB,QAASwB,GAAanC,EAAOoG,EAAQjG,GAC/B6B,MAAMC,QAAQ9B,EAAMC,KAAK,IAC3BJ,EAAMsF,SAASe,QAAQ,SAAUC,EAASd,IACvCc,EAAQC,QAAUD,EAAQE,MAAMH,QAAQ,SAAUI,EAAUC,GAC3DD,EAASd,MAAQS,EAAOZ,GAAGkB,OAI/B1G,EAAM2G,SAASN,QAAQ,SAAUO,EAASpB,GACxCoB,EAAQjB,MAAQS,EAAOZ,KAG3BxF,EAAMqC,SACNlC,EAAM+C,MAAM,SAAUlD,GAGxB,QAASiB,GAAS0E,GAChB,OAASA,GACN3D,MAAMC,QAAQ0D,KAAYA,EAAM5D,QACf,gBAAV4D,KAAwBkB,OAAOC,KAAKnB,GAAO5D,OAIvD,QAASqC,GAAU2C,GACjB,GAAIC,GAASC,SAASF,EAAK,IACvBG,EAAKF,GAAU,GAAM,IACrBG,EAAKH,GAAU,EAAK,IACpBI,EAAa,IAATJ,CAER,QAAQE,EAAGC,EAAGC,GAxRhBnE,MAAMa,SAASC,OAAOsD,YAAa,EACnCpE,MAAMa,SAASC,OAAOuD,qBAAuB,6DAE7CrE,MAAMa,SAASC,OAAOvD,UAElB+D,UAAW,wBACXE,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,0BAGtBN,UAAW,wBACXE,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,0BAGtBN,UAAW,sBACXE,YAAa,oBACbC,WAAY,oBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,wBAGtBN,UAAW,uBACXE,YAAa,qBACbC,WAAY,qBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,yBAGtBN,UAAW,uBACXE,YAAa,qBACbC,WAAY,qBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,yBAGtBN,UAAW,wBACXE,YAAa,sBACbC,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,0BAGtBN,UAAW,qBACXE,YAAa,mBACbC,WAAY,mBACZC,iBAAkB,OAClBC,mBAAoB,OACpBC,qBAAsB,qBAI1BjB,QAAQ2D,OAAO,eACZC,UAAU,YAAa,WAAc,MAAOxH,OAC5CwH,UAAU,YAAa,WAAc,MAAOxH,GAAM,UAClDwH,UAAU,WAAY,WAAc,MAAOxH,GAAM,SACjDwH,UAAU,aAAc,WAAc,MAAOxH,GAAM,WACnDwH,UAAU,gBAAiB,WAAc,MAAOxH,GAAM,cACtDwH,UAAU,WAAY,WAAc,MAAOxH,GAAM,SACjDwH,UAAU,iBAAkB,WAAc,MAAOxH,GAAM","file":"angular-chart.js","sourcesContent":["(function () {\r\n  'use strict';\r\n\r\n  Chart.defaults.global.responsive = true;\r\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\r\n\r\n  Chart.defaults.global.colours = [\r\n    { // blue\r\n      fillColor: 'rgba(151,187,205,0.2)',\r\n      strokeColor: 'rgba(151,187,205,1)',\r\n      pointColor: 'rgba(151,187,205,1)',\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: 'rgba(151,187,205,0.8)'\r\n    },\r\n    { // light grey\r\n      fillColor: 'rgba(220,220,220,0.2)',\r\n      strokeColor: 'rgba(220,220,220,1)',\r\n      pointColor: 'rgba(220,220,220,1)',\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: 'rgba(220,220,220,0.8)'\r\n    },\r\n    { // red\r\n      fillColor: 'rgba(247,70,74,0.2)',\r\n      strokeColor: 'rgba(247,70,74,1)',\r\n      pointColor: 'rgba(247,70,74,1)',\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: 'rgba(247,70,74,0.8)'\r\n    },\r\n    { // green\r\n      fillColor: 'rgba(70,191,189,0.2)',\r\n      strokeColor: 'rgba(70,191,189,1)',\r\n      pointColor: 'rgba(70,191,189,1)',\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: 'rgba(70,191,189,0.8)'\r\n    },\r\n    { // yellow\r\n      fillColor: 'rgba(253,180,92,0.2)',\r\n      strokeColor: 'rgba(253,180,92,1)',\r\n      pointColor: 'rgba(253,180,92,1)',\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: 'rgba(253,180,92,0.8)'\r\n    },\r\n    { // grey\r\n      fillColor: 'rgba(148,159,177,0.2)',\r\n      strokeColor: 'rgba(148,159,177,1)',\r\n      pointColor: 'rgba(148,159,177,1)',\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: 'rgba(148,159,177,0.8)'\r\n    },\r\n    { // dark grey\r\n      fillColor: 'rgba(77,83,96,0.2)',\r\n      strokeColor: 'rgba(77,83,96,1)',\r\n      pointColor: 'rgba(77,83,96,1)',\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: 'rgba(77,83,96,1)'\r\n    }\r\n  ];\r\n\r\n  angular.module('chart.js', [])\r\n    .directive('chartBase', function () { return chart(); })\r\n    .directive('chartLine', function () { return chart('Line'); })\r\n    .directive('chartBar', function () { return chart('Bar'); })\r\n    .directive('chartRadar', function () { return chart('Radar'); })\r\n    .directive('chartDoughnut', function () { return chart('Doughnut'); })\r\n    .directive('chartPie', function () { return chart('Pie'); })\r\n    .directive('chartPolarArea', function () { return chart('PolarArea'); });\r\n\r\n  function chart (type) {\r\n    return {\r\n      restrict: 'CA',\r\n      scope: {\r\n        data: '=',\r\n        labels: '=',\r\n        options: '=',\r\n        series: '=',\r\n        colours: '=?',\r\n        getColour: '=?',\r\n        chartType: '=',\r\n        legend: '@',\r\n        click: '='\r\n      },\r\n      link: function (scope, elem/*, attrs */) {\r\n        var chart, container = document.createElement('div');\r\n        container.className = 'chart-container';\r\n        elem.replaceWith(container);\r\n        container.appendChild(elem[0]);\r\n\r\n        if (typeof window.G_vmlCanvasManager === 'object' && window.G_vmlCanvasManager !== null) {\r\n          if (typeof window.G_vmlCanvasManager.initElement === 'function') {\r\n            window.G_vmlCanvasManager.initElement(elem[0]);\r\n          }\r\n        }\r\n\r\n        scope.$watch('data', function (newVal, oldVal) {\r\n          if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) return;\r\n          var chartType = type || scope.chartType;\r\n          if (! chartType) return;\r\n\r\n          if (chart) {\r\n            if (canUpdateChart(newVal, oldVal)) return updateChart(chart, newVal, scope);\r\n            chart.destroy();\r\n          }\r\n\r\n          chart = createChart(chartType, scope, elem);\r\n        }, true);\r\n\r\n        scope.$watch('series', resetChart, true);\r\n        scope.$watch('labels', resetChart, true);\r\n        scope.$watch('options', resetChart, true);\r\n        scope.$watch('colours', resetChart, true);\r\n\r\n        scope.$watch('chartType', function (newVal/*, oldVal */) {\r\n          if (! newVal) return;\r\n          if (chart) chart.destroy();\r\n          chart = createChart(newVal, scope, elem);\r\n        });\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (chart) chart.destroy();\r\n        });\r\n\r\n        scope.$on('$reload', function () {\r\n          if (chart) chart.update();\r\n        });\r\n\r\n        function resetChart (newVal/*, oldVal*/) {\r\n          if (isEmpty(newVal)) return;\r\n          var chartType = type || scope.chartType;\r\n          if (! chartType) return;\r\n\r\n          // chart.update() doesn't work for series and labels\r\n          // so we have to re-create the chart entirely\r\n          if (chart) chart.destroy();\r\n\r\n          chart = createChart(chartType, scope, elem);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  function canUpdateChart(newVal, oldVal) {\r\n    if (newVal && oldVal && newVal.length && oldVal.length) {\r\n      return Array.isArray(newVal[0]) ?\r\n      newVal.length === oldVal.length && newVal[0].length === oldVal[0].length :\r\n        oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function sum (carry, val) {\r\n    return carry + val;\r\n  }\r\n\r\n  function createChart (type, scope, elem) {\r\n    if (! scope.data || ! scope.data.length) return;\r\n    scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;\r\n    scope.colours = getColours(scope);\r\n    var cvs = elem[0], ctx = cvs.getContext('2d');\r\n    var data = Array.isArray(scope.data[0]) ?\r\n      getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) :\r\n      getData(scope.labels, scope.data, scope.colours);\r\n    var chart = new Chart(ctx)[type](data, scope.options || {});\r\n    scope.$emit('create', chart);\r\n    if (scope.click) {\r\n      cvs.onclick = function (evt) {\r\n        var click = chart.getPointsAtEvent || chart.getBarsAtEvent || chart.getSegmentsAtEvent;\r\n\r\n        if (click) {\r\n          var activePoints = click.call(chart, evt);\r\n          scope.click(activePoints, evt);\r\n          scope.$apply();\r\n        }\r\n      };\r\n    }\r\n    if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);\r\n    return chart;\r\n  }\r\n\r\n  function getColours (scope) {\r\n    var colours = scope.colours || angular.copy(Chart.defaults.global.colours);\r\n    while (colours.length < scope.data.length) {\r\n      colours.push(scope.getColour());\r\n    }\r\n    return colours.map(convertColour);\r\n  }\r\n\r\n  function convertColour (colour) {\r\n    if (typeof colour === 'object' && colour !== null) return colour;\r\n    if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));\r\n    return getRandomColour();\r\n  }\r\n\r\n  function getRandomColour () {\r\n    var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\r\n    return getColour(colour);\r\n  }\r\n\r\n  function getColour (colour) {\r\n    return {\r\n      fillColor: rgba(colour, 0.2),\r\n      strokeColor: rgba(colour, 1),\r\n      pointColor: rgba(colour, 1),\r\n      pointStrokeColor: '#fff',\r\n      pointHighlightFill: '#fff',\r\n      pointHighlightStroke: rgba(colour, 0.8)\r\n    };\r\n  }\r\n\r\n  function getRandomInt (min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  function rgba(colour, alpha) {\r\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\r\n  }\r\n\r\n  function getDataSets (labels, data, series, colours) {\r\n    return {\r\n      labels: labels,\r\n      datasets: data.map(function (item, i) {\r\n        var dataSet = angular.copy(colours[i]);\r\n        dataSet.label = series[i];\r\n        dataSet.data = item;\r\n        return dataSet;\r\n      })\r\n    };\r\n  }\r\n\r\n  function getData (labels, data, colours) {\r\n    return labels.map(function (label, i) {\r\n      return {\r\n        label: label,\r\n        value: data[i],\r\n        color: colours[i].strokeColor,\r\n        highlight: colours[i].pointHighlightStroke\r\n      };\r\n    });\r\n  }\r\n\r\n  function setLegend (elem, chart) {\r\n    var $parent = elem.parent(),\r\n        $oldLegend = $parent.find('chart-legend'),\r\n        legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\r\n    if ($oldLegend.length) $oldLegend.replaceWith(legend);\r\n    else $parent.append(legend);\r\n  }\r\n\r\n  function updateChart (chart, values, scope) {\r\n    if (Array.isArray(scope.data[0])) {\r\n      chart.datasets.forEach(function (dataset, i) {\r\n        (dataset.points || dataset.bars).forEach(function (dataItem, j) {\r\n          dataItem.value = values[i][j];\r\n        });\r\n      });\r\n    } else {\r\n      chart.segments.forEach(function (segment, i) {\r\n        segment.value = values[i];\r\n      });\r\n    }\r\n    chart.update();\r\n    scope.$emit('update', chart);\r\n  }\r\n\r\n  function isEmpty (value) {\r\n    return ! value ||\r\n      (Array.isArray(value) && ! value.length) ||\r\n      (typeof value === 'object' && ! Object.keys(value).length);\r\n  }\r\n\r\n  // Credit: http://stackoverflow.com/a/11508164/1190235\r\n  function hexToRgb (hex) {\r\n    var bigint = parseInt(hex, 16),\r\n        r = (bigint >> 16) & 255,\r\n        g = (bigint >> 8) & 255,\r\n        b = bigint & 255;\r\n\r\n    return [r, g, b];\r\n  }\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}